style
  include style.css

- var ctrl_id =`${id}`
- var props = ctrl_id+".props"
- var xhrt = ctrl_id+".xhrt"

script.
  //- функція простору імен для нашого контролера
  const #{ctrl_id} = function() {
    return 0
  }

  // ініціалізація змінних 
  #{props} ={};

  //- завдання (уставка) SP (set point) в %
  #{props}.SP={
    updateValue: function (value) {
      document.getElementById("#{ctrl_id}_SP_range").value = value;
      document.getElementById("#{ctrl_id}_SP_value").innerHTML = parseInt(value);
      #{props}.SP.value=value;
      return value
      }, 
    value: 0,
  }
    //- поточне значення PV (process value) в %
  #{props}.PV={
    updateValue: function (value) {
      document.getElementById("#{ctrl_id}_PV_slider").value = value;
      document.getElementById("#{ctrl_id}_PV_value").innerHTML = value.toFixed(1);
      #{props}.PV.value=value;
      return value
      }, 
    value: 0,
  }

  //- поточне значення в м3/год
  #{props}.flow={
    updateValue: function (value) {
      console.log("---> flow.updateValue("+value+")")
      document.getElementById("#{ctrl_id}_flow_value").innerHTML = value.toFixed(2);
      #{props}.flow.value=value;
      return value;
      }, 
    value: 0,
  }

  //- поточний стан контролера
  #{props}.state={
    updateValue: function (obj={}) {
      let trace=1, ln = '#{props}.state::'
      trace ? console.log(ln+"Started"):null;
      #{props}.state.value=obj;
      #{props}.state.askPeriod=obj.askPeriod;

      if (obj.locked) { document.getElementById("#{ctrl_id}_SP_range").enabled = obj.locked; }

      if (obj.note.ua) {
        document.getElementById("#{ctrl_id}_state_note").innerHTML=obj.note.ua}

      return obj.note.ua
      }, //updateValue
    value: {},
    askPeriod: 1,
  }

  //- поточний стан контролера
  #{props}.pressure={
    updateValue: function (obj={}) {
      let trace=1, ln = '#{props}.pressure::'
      trace ? console.log(ln+"Started"):null;
      #{props}.pressure.value=obj;
      let el = document.getElementById("#{ctrl_id}_pressure_note");
      if (obj.note.ua) {
        el.innerHTML=obj.note.ua}
      let style=el.style;
      switch (obj.note.code) {
        case "normal":
          style.color='null';
          break;
        case "warning":
        case "notdefined":
          style.color='orange';
          break;
        case 'alarm':
        case 'high':
          style.color='red';
          break;
        default:
          style.color='grey';
      }
      trace ? console.log(ln+"Style=",style):null;

      return obj.note.ua
      }, //updateValue
    value: {},
    askPeriod: 1,
  }



h4 #{id}: #{fullName.ua}

div(class="flowController-container")
  input(type='range' min='0' max='100' value=`0` class="slider" id=`${ctrl_id}_SP_range`)
  progress(class="slider" value=`0` max="100" id=`${ctrl_id}_PV_slider`)


div(class="flowController-container")
  table(width="100%")
    tr
      td(width="30%") 
        b PV = 
          span(id=`${id}_PV_value`)  0
          span() &nbsp;%
      td(width="30%") 
        b SP =
          span(id=`${id}_SP_value`) 0
          span() &nbsp;%
      td() 
        b Flow =
          span(id=`${id}_flow_value`) 0.00
          span() &nbsp;м3/год
    tr
      td(colspan=2)
        i Стан:
        span(id=`${id}_state_note`) Невизначено
      td
        i Тиск:
        span(id=`${id}_pressure_note` style="font-weight:bold") Невизначено
script.

  // об'єкт запиту на сервер
  #{xhrt} = new XMLHttpRequest(); 

  #{xhrt}.onload = () => {
    let trace=1;
    let ln=`#{xhrt}.onload::`;
    trace ? console.log(ln,"Data received: res=",#{xhrt}.responseText):null;
    // плануємо наступний запуск
    setTimeout( () => {#{ctrl_id}.getRegs();},#{props}.state.askPeriod*1000);
    trace=0;
    let res;
    try {
      res=JSON.parse( #{xhrt}.responseText);
      trace ? console.log(ln,"Data parsed: res=",res):null;

    } catch {
      console.log(ln,"Error::",#{xhrt}.responseText);
      return
    };

    if (! res.err) {
    for (let prop in  res.data ) {
      if( res.data.hasOwnProperty( prop ) ) {
        trace ? console.log(ln+'res.data['+ prop + "]="+res.data[prop]):null;
        if (#{props}[prop]) {
          let result= #{props}[prop].updateValue(res.data[prop]);
          trace ? console.log(ln+'#{props}'+"."+ prop + " = " +result):null;
        } else {
          trace ? console.log(ln+'#{props}'+"."+ prop + " Not found"):null;
        }
    } } }


  };

  #{xhrt}.onerror = function(){
    let xhrT=#{ctrl_id}.xhrT
    console.log(ln+"Error POST from /realtimes :"+ xhrT.err + '::' + xhrT.statusText)
    setTimeout( () => {#{ctrl_id}.getRegs();},5000);
  } //  xhrT.onerror

  //- запит на отримання даних з сервера

  #{ctrl_id}.getRegs= () => {
    let url = new URL(document.baseURI + `#{ctrl_id}/getRegs`);
    url.searchParams.set("regs","SP;PV;flow;state;pressure");

    #{xhrt}.open("POST",url);
    #{xhrt}.send();
    //console.log("Request [ "+url+" ]was sended");
  }

  //- #{ctrl_id}.getAll_url =  //- запит на отримання вcього комплекту даних
  //- #{ctrl_id}.setSP_url = "/#{ctrl_id}/setSP"; // запит на зміну SP
  setTimeout( () => {#{ctrl_id}.getRegs();},3000);
  //  обробники подій зміни завдання SP
  document.getElementById("#{ctrl_id}_SP_range").onchange=function (event) {
  let value = event.target.value;
  //#{props}.SP.updateValue(value);

  let url = new URL(document.baseURI + `#{ctrl_id}/setRegs`);
    url.searchParams.set("regs",JSON.stringify({SP:value}));
  console.log("#{ctrl_id}_onchange::",url);
  #{xhrt}.open("POST",url);
  #{xhrt}.send();
  setTimeout(() => {#{ctrl_id}.getRegs();},500);
  //#{props}.PV.updateValue(value); // для тестування
  } //document.getElementById("#{ctrl_id}_SP_range").onchange
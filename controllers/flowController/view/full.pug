style
  include style.css
//-      ------------    declare PUG - variables  -------------------------

- var ctrl_id =`${id}` //- id контролера 
- var props = ctrl_id+".props" //- props контролера
- var xhrt = ctrl_id+".xhrt" // - 

//-      ------------    HTML   -------------------------



div(class="flowController-container")
  h4  #{fullName.ua} (#{id})
  input(type='range' min='0' max='100' value=`0` class="slider" id=`${ctrl_id}_SP_range`)
  progress(class="slider" value=`0` max="100" id=`${ctrl_id}_PV_slider`)


div(class="flowController-container")
  table(width="90%")
    tr
      td(width="25%") 
        b PV =&nbsp;
          span(id=`${id}_PV_value`)  0
          span() &nbsp;%
      td(width="25%") 
        b SP =&nbsp;
          span(id=`${id}_SP_value`) 0
          span() &nbsp;%
      td() 
        b Flow =&nbsp;
          span(id=`${id}_flow_value`) 0.00
          span() &nbsp;м3/год
    tr
      td(colspan=2)
        i Стан:&nbsp;
        span(id=`${id}_state_note` style="font-weight:bold") Невизначено
      td
        i Тиск:&nbsp;
        span(id=`${id}_pressure_note` style="font-weight:bold") Невизначено




//-      ------------    JS   -------------------------
script.

  //- функція простору імен для нашого контролера
  const #{ctrl_id} = function() {
    return 0
  }


  // ініціалізація параметрів контролера  
  #{props} ={};

  //- завдання (уставка) SP (set point) в %
  #{props}.SP={
    updateValue: function (value) {

      document.getElementById("#{ctrl_id}_SP_range").value = isFinite(value) ? value : 0;
      document.getElementById("#{ctrl_id}_SP_value").innerHTML = isFinite(value) ? parseInt(value) : "???";
      #{props}.SP.value=value;
      return value
      }, 
    value: 0,
  }
    //- поточне значення PV (process value) в %
  #{props}.PV={
    updateValue: function (value) {
      document.getElementById("#{ctrl_id}_PV_slider").value = isFinite(value) ? value : 0;
      document.getElementById("#{ctrl_id}_PV_value").innerHTML = isFinite(value) ? value.toFixed(1): "???";
      #{props}.PV.value=value;
      return value
      }, 
    value: 0,
  }

  //- поточне значення в м3/год
  #{props}.flow={
    updateValue: function (value) {

      //console.log("---> flow.updateValue("+value+")")
      document.getElementById("#{ctrl_id}_flow_value").innerHTML = isFinite(value) ? value.toFixed(2) : "???";
      #{props}.flow.value=value;
      return value;
      }, 
    value: 0,
  }

  //- поточний стан контролера
  #{props}.state={
    updateValue: function (obj=undefined) { // функція, що оновлює дані на сторінці
      let trace=0, ln = '#{props}.state('+obj+')::'
      trace ? console.log(ln+"Started"):null;
      #{props}.state.value=obj;
      let el = document.getElementById("#{ctrl_id}_state_note");
      let style=el.style;

      // якщо undefined - ставимо стан помилки та виходимо 
      if ( typeof(obj) == "undefined" ) {
        #{ctrl_id}.setErrorNote(el);
        return
        }

      if (obj.locked) { document.getElementById("#{ctrl_id}_SP_range").enabled = obj.locked; }
      // змінюємо напис
      el.innerHTML=obj.note.ua
      switch (obj.note.code){
        case 'working':
          style.color = "darkgreen"
          break;
        case 'transition':
          style.color="orange";
          break;
        case 'waiting' :
          style.color = "grey"
          break;
        case 'lowFlow':
        case "highFlow":
          style.color = "red"
          break;
      }



      return obj.note.ua
      }, //updateValue
    value: {}, // поточне значення
  }

  //- поточний стан контролера
  #{props}.pressure={
    updateValue: function (obj=undefined) {
      let trace=0, ln = '#{props}.pressure::'
      trace ? console.log(ln+"Started"):null;
      #{props}.pressure.value=obj;

      let el = document.getElementById("#{ctrl_id}_pressure_note");
      // якщо undefined - ставимо стан помилки та виходимо 
      if ( typeof(obj) == "undefined" ) {
        #{ctrl_id}.setErrorNote(el);
        return
        }
      el.innerHTML=obj.note.ua;
      let style=el.style;
      switch (obj.note.code) {
        case "normal":
          style.color='darkgreen';
          break;
        case "warning":
        case "notdefined":
          style.color='orange';
          break;
        case 'alarm':
        case 'high':
          style.color='red';
          break;
        default:
          style.color='grey';
      }
      trace ? console.log(ln+"Style=",style):null;

      return obj.note.ua
      }, //updateValue
    value: {},

  }

  #{ctrl_id}.setErrorNote= (el) => {
    // вписує знаки ??? в innerHTML елементу el
    // змінює колір тексту на червоний
    el.innerHTML = "???";
    el.style.color = "red";
  }

  #{ctrl_id}.setRegs= (data) => {
    let trace=0, ln="#{ctrl_id}.setRegs()->";
    // функція перебирає регістри в відповіді та змінює поля
      for (let prop in  data ) {
        if( data.hasOwnProperty( prop ) ) {
          trace ? console.log(ln+'data['+ prop + "]="+data[prop]):null;
          if (#{props}[prop]) {
            let result= #{props}[prop].updateValue(data[prop]);
            trace ? console.log(ln+'#{props}'+"."+ prop + " = " +result):null;
          } else {
            trace ? console.log(ln+'#{props}'+"."+ prop + " Not found"):null;
          }
    } }
    return true 
  }

  #{ctrl_id}.errorRegs = () => {
    // функція встановлює стан помилки звязку
    let data = {PV:undefined,SP:undefined, state:undefined, pressure:undefined, flow:undefined} 
      #{ctrl_id}.setRegs(data);
  }

  // об'єкт запиту на сервер
  #{xhrt} = new XMLHttpRequest(); 

  #{xhrt}.onload = () => {
    let trace=1;
    let ln=`#{xhrt}.onload::`;
    //trace ? console.log(ln,"Data received: res=",#{xhrt}.responseText):null;
    // плануємо наступний запуск через 2 сек
    setTimeout( () => {#{ctrl_id}.getRegs();},2000);
    trace=0;
    let res;
    try {
      res=JSON.parse( #{xhrt}.responseText);

      if ( typeof(res) == "string" ) {
        trace ? console.log(ln,"Error:: Data must be an Object but 'res' is string::",res.slice(0,10)):null;
        throw new Error("Response must be an object")

      }
      trace ? console.log(ln,"Data parsed: res.data=",res.data):null;

    } catch {
      console.log(ln,"Error::",#{xhrt}.responseText.slice(0,20));
      // встановлюємо стан помилки
      #{ctrl_id}.errorRegs()
      return

    };

    if (! res.err) {
      // оновлюємо компоненти
      #{ctrl_id}.setRegs(res.data)
    }


  };

  #{xhrt}.onerror = function(){
    let ln="#{ctrl_id}.xhrT.onerror::"
    let xhrT=#{ctrl_id}.xhrt
    console.log(ln + "Error: Connection down !!!" );
    #{ctrl_id}.errorRegs();
    setTimeout( () => {#{ctrl_id}.getRegs();},5000);

  } //  xhrT.onerror

  //- запит на отримання даних з сервера

  #{ctrl_id}.getRegs= () => {
    //- 2023-11-14 тут помилка при запитах зі сторінки контролерів, буде шлях  /controllers/controllers
    let url = new URL(document.baseURI + `/controllers/#{ctrl_id}/getRegs`);
    url.searchParams.set("regs","SP;PV;flow;state;pressure");

    #{xhrt}.open("POST",url);
    #{xhrt}.send();
    //console.log("Request [ "+url+" ]was sended");
  }

  //  перший запит  
  setTimeout( () => {#{ctrl_id}.getRegs();},3000);

  //  обробники подій зміни завдання SP
  document.getElementById("#{ctrl_id}_SP_range").onchange=function (event) {
  let value = event.target.value;
  let url = new URL(document.baseURI + `/controllers/#{ctrl_id}/setRegs`);
    url.searchParams.set("regs",JSON.stringify({SP:value}));
  console.log("#{ctrl_id}_onchange::",url);
  #{xhrt}.open("POST",url);
  #{xhrt}.send();
  setTimeout(() => {#{ctrl_id}.getRegs();},500);
  //#{props}.PV.updateValue(value); // для тестування
  } //document.getElementById("#{ctrl_id}_SP_range").onchange
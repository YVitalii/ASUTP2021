const config={};

// включает/выключает  эмуляцию обмена по RS485
config.emulateRS485=1//true;
// загружает настройки связи
config.connection=require('./conf_iface.js');
// ------------------- описание печей (сущностей) ------------------------
let entities = [];
entities.push({
  id:"SNO-658-11"
	,shortName:"СНО-6.5.8/11" // короткое имя печи
  ,fullName: "Печь закалочная СНО-6.5.8/11" // полное имя печи
  ,temperature:{min:0,max:1000} // диапазон рабочих температур

  ,regs:{
        "3-T":{  // реальный адрес регистра, по которому нужно делать запрос
          title:"T" // отображаемое имя для вывода в описании поля
          ,type:"integer" // тп поля
          ,units: "\u00b0C" //единицы
          ,description:"Текущая температура в печи" // описание
        }
      }//regs
  ,listRegs:"3-T" // список регистров для запроса, что бы их не генерировать каждый раз
});

entities.push({
  id:"SSHCM-8.15-10"
	,shortName:"СШЦМ-8.15/10" //
  ,fullName: "Печь цементационная СШЦМ-8.15/10" //
  ,temperature:{min:0,max:1000} // диапазон рабочих температур
  ,regs:{
        "1-T":{
          title:"T1" // имя для вывода в описании поля
          ,type:"integer"
          ,units: "\u00b0C"
          ,description:"Текущая температура в зоне №1"
        }
        ,"2-T":{
          title:"T2" // имя для вывода в описании поля
          ,units: "\u00b0C"
          ,type:"integer"
          ,description:"Текущая температура в зоне №2"
        }
      }//regs
  ,listRegs:"1-T;2-T" // список регистров для запроса, что бы их не генерировать каждый раз
});

config.entities=entities;

// таблица сопоставления адреса устройства и типа (массив где индекс - адрес устройства, а значение - имя файла драйвера)
config.devices=[
    "all" //0
   ,"TRP08" //1
   ,"TRP08" //2
   ,"TRP08" //3
 ];
 // список используемых алиасов с указанием физического имени регистра
// (т.е. адрес ModBus + сигнатура в драйвере устройства, например 7SQ1 => 5-DIO1 )
var tags= new Map();
for (var i = 1; i <= 3; i++) {
  tags.set("sT"+i,i+"-T");
};
config.tags=tags;

// настройки логгера
config.logger={
   path:__dirname+"/public/logs"
  ,period:30 // период между записями 30 секунд
};
// ------------  очереди опроса  -----------------------
config.queue={};
// рабочая очередь опроса, опрашивается автоматически в цикле
//  актульным считается значение,если оно считано не более 5 сек назад
config.queue.work=["1-T","2-T","3-T"];

module.exports=config;

if (! module.parent) {
  console.dir(config,{depth:4});
  console.dir(new Buffer.from([15,10,8]),{depth:4});
  //util.inspect(config)
}
